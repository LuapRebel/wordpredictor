mtcars
install.packages("RCurl")
library(Rcurl)
library(RCurl)
library(RCurl)
install.packages("RCurl")
library(RCurl)
install.packages("RCurl")
library(RCurl)
source("http://bioconductor.org/biocLite.R")
install.packages("dplyr", ggplot2)
install.packages("dplyr", "ggplot2")
install.packages(c("dplyr", "ggplot2"))
install.packages(c("data.table", "ISLR", "devtools", "glmnet", "Hmisc"))
install.packages("knitr", "caret")
install.packages("knitr")
install.packages("caret")
require(devtools)
install_github('ramnathv/rCharts')
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
devtools::install_github("shiny", "rstudio")
install.packages("boot")
install.packages("bootstrap")
install.packages("caretEnsemble")
install.packages("tm")
install.packages("corpora")
install.packages("downloader")require(devtools)
install.packages("downloader")
install.packages("e1071")
install.packages("ElemStatLearn")
install.packages("gam"); install.packages("GAMBoost")
install.packages("gbm")
install.packages("ggvis"); install.packages("googleVis")
install.packages("ipred")
install.packages(c("maptools", "openNLP", "openNLPdata"))
install.packages("kernlab")
install.packages("lmtest")
install.packages("locfit")
install.packages("lubridate")
install.packages("mapproj"); install.packages("map")
install.packages(c("png", "jpeg"))
install.packages("maps")
install.packages(c("pls", "pROC", "ProjectTemplate", "quantmod"))
install.packages(c("R2HTML", "randomForest", "rattle", "rgl", "rMaps",
"rmarkdown", "rpart", "rpart.plot", "RPostgreSQL",
"RSQLite", "RWeka", "RWekajars", "sandwich", "shinyapps",
"sqldf", "tidyr", "tiff", "tree", "tseries", "UsingR",
"xlsx", "xlsxjars", "XML")
)
devtools::install_github("rMaps", "shinyapps")
devtools::install_github("rMaps", 'ramnathv')
devtools::install_github("shinyapps", "rstudio")
devtools::install_github("shinyapps", "rstudio/shinyapps")
load("~/R/Data/Coursera/10.DataScienceCapstone/lgfreq3.RData")
rm(testAnswers, testSample)
save.image("./lgfreq3shiny.RData")
setwd("~/R/Data/Coursera/10.DataScienceCapstone")
setwd("~/R/Data/Coursera/10.DataScienceCapstone/shinyapp-wordpredictor")
file.edit("./server.R")
shiny::runApp()
library("doSNOW", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("multicore")
install.packages("parallel")
library("parallel", lib.loc="/usr/lib/R/library")
vignette(package="parallel", topic = "parallel")
combined.sample <- readRDS("../TestData2650.Rds")
length(combined.sample)
set.seed(588)
testSample <- sample(combined.sample, size=5000, replace=F)
testAnswers <- c()
for(i in 1:length(testSample)){
testAnswers[i] <- paste(unlist(strsplit(testSample[i], " "))[5], collapse=" ")
testSample[i] <- paste(unlist(strsplit(testSample[i], " "))[1:4], collapse=" ")
}
# testSampleSample
testAnswers <- prepareText(testAnswers)
testSample <- prepareText(testSample)
prt <- proc.time()
prediction <- vector()
for(i in 1:5000){
inputText <- testSample[i]
words <- unlist(strsplit(inputText, " "))
# Shrink string down to last 4 words if it is longer
if(length(words)>4){
words <- tail(words, 4)
}
# Grab input text of differing length to match to n-grams
wordpred5 <- paste(words, collapse=" ")
n5 <- head(quingrams[quingrams$input==wordpred5,], n=1)
wordpred4 <- paste(tail(words, 3), collapse=" ")
n4 <- head(quadgrams[quadgrams$input==wordpred4,], n=1)
wordpred3 <- paste(tail(words, 2), collapse=" ")
n3 <- head(trigrams[trigrams$input==wordpred3,], n=1)
wordpred2 <- words[length(words)]
n2 <- head(bigrams[bigrams$input==wordpred2,], n=1)
n1 <- head(unigrams, 1)
# Create matrix of results matching input text and select largest n-gram's prediction
predMatrix <- rbind(n5, n4, n3, n2, n1)
prediction[i] <- predMatrix$prediction[1]
# Remove profanity from result
# Thanks to ryanlewis for providing the profanity list
# https://gist.github.com/ryanlewis/a37739d710ccdb4b406d#file-google_twunter_lol
#     profanity <- readLines("./google_twunter_lol.txt")
#     if(prediction[i] %in% profanity){
#         print("CENSORED")
#     } else {
#         print(prediction[i])
#     }
}
proc.time() - prt
380.418/5000
library(dplyr)
comparison.lgFreq3 <- data.frame(Predicted=prediction, Actual=testAnswers)
comparison.lgFreq3$Predicted <- as.character(comparison.lgFreq3$Predicted)
comparison.lgFreq3$Actual <- as.character(comparison.lgFreq3$Actual)
comparison.lgFreq3 <- mutate(comparison.lgFreq3, Equal=(Predicted==Actual))
head(comparison.lgFreq3)
sum(comparison.lgFreq3$Equal)/nrow(comparison.lgFreq3)
ls()[grepl("test", ls())]
ls()[grepl("grams|profanity|prepareText", ls())]
rm(list=ls()[!grepl("test", ls())])
load("~/R/Data/Coursera/10.DataScienceCapstone/shinyapp-wordpredictor/shinydata.RData")
Instructions
shiny::runApp()
shiny::runApp()
shiny::runApp()
